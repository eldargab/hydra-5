import {ApiPromise, WsProvider} from "@polkadot/api"
import {compactFromU8a, u8aToBn} from "@polkadot/util"
import * as fs from "fs"
import {decodeBinary} from "./scale/decode"
import {Src} from "./scale/src"
import {getTypesFromMetadata} from "./scale/util"
import {def} from "./util/util"


async function chain(): Promise<ApiPromise> {
    let provider = new WsProvider('wss://kusama-rpc.polkadot.io/')
    return await ApiPromise.create({provider})
}


async function main(): Promise<void> {
    const data = ""
    let types = getTypesFromMetadata(JSON.parse(fs.readFileSync('metadata.json', 'utf-8')))
    let defs = types.map(type => type.def)

    // let api = await chain()
    // let events = await api.query.system.events.at('0xdcbaa224ab080f2fbf3dfc85f3387ab21019355c392d79a143d7e50afba3c6e9')

    let decoded = decodeBinary(defs, 18, toBin(data))
    console.log(decoded)

    // let api = await chain()
    // let at = await api.at('0xdcbaa224ab080f2fbf3dfc85f3387ab21019355c392d79a143d7e50afba3c6e9')
    // print(at.registry.metadata)
}


function toBin(hex: string): Buffer {
    return Buffer.from(hex.slice(2), 'hex')
}


function print(obj: any): void {
    console.log(JSON.stringify(obj, null, 2))
}


main().then(
    () => process.exit(0),
    err => {
        console.log(err)
        process.exit(1)
    }
)
